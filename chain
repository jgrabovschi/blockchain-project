#!/usr/bin/env python3

from hashlib import sha256
import json
import time

class Block:
    def __init__(self, data, previous_hash):
        self.data = data
        self.previous_hash = previous_hash
        self.hash = self.calc_hash()

    def calc_hash(self):
        return sha256(self.data.encode()).hexdigest()
    
class Blockchain:

    def __init__(self):
        self.chain = []
        self.create_genesis_block()

    def create_genesis_block(self):
        self.chain.append(Block("Genesis Block", "0"))
        self.last_block = self.first_block = self.chain[0]

    def add_block(self, data):
        self.chain.append(Block(data, self.chain[-1].hash))
        self.last_block = self.chain[len(self.chain) - 1]

    def print_chain(self):
        print(json.dumps(self.__dict__, indent=4, default=lambda x: x.__dict__))

    def get_first_block_hash(self):
        return self.first_block.hash

    def get_last_block_hash(self):
        return self.last_block.hash


blockchain = Blockchain()

blockchain.add_block("Block 1")
blockchain.add_block("Block 2")
blockchain.add_block("Block 3")

blockchain.print_chain()

print(blockchain.get_first_block_hash())
print(blockchain.get_last_block_hash())

while (True):
    for block in blockchain.chain:
        if block.hash != block.calc_hash():
            print("Blockchain is invalid")
            break
        if blockchain.chain.index(block) == 0:
            continue
        if block.previous_hash != blockchain.chain[blockchain.chain.index(block) - 1].hash:
            print("Blockchain is invalid")
            break
    print("Blockchain is valid")
    time.sleep(1)